&ACCESS  RV
&PARAM DISKPATH = TP/CNC
&PARAM EDITMASK = *
&PARAM TEMPLATE = C:\KRC\Roboter\Template\vorgabe
&REL 5
DEF cncMotion()

DECL FRAME cncToolFrame
BOOL cncSkipLoadTool
cncToolFrame = $NULLFRAME
cncTrackingMode = 0
cncSkipLoadTool = true

WAIT SEC 1.0

; enable G-code execution until the numeric control processing is finished
WHILE (cncTrackingMode > -1)

  cncRetMdCmd = MD_CMD(cncDeviceName[], "GET TRACKING_MODE", cncParInt[], cncParReal[])
  cncTrackingMode = cncParInt[1]

  IF (cncTrackingMode > 0) THEN
	;Skip Load Tool at the first call of cncMotion.src
    IF (cncSkipLoadTool == false) THEN
		IF (cncReferenceTool > 0) THEN

		  ; $TOOL, $LOAD and $IPO_MODE are initialised with the reference tool via the call to BAS.SRC
		  ; $LOAD and $IPO_MODE have to be initialised here because they are not taken into account by the numeric control
		  BAS (#TOOL, cncReferenceTool)

		  ; inform the cncAdapter about the geometry of the reference tool
		  cncParReal[1] = 0
		  cncParReal[2] = 0
		  cncParReal[3] = 0
		  cncParReal[4] = 0
		  cncParReal[5] = 0
		  cncParReal[6] = 0

		  ; read the tool that was activated by the numeric control e.g. programmed via "T<cncToolIndex> M6"
		  ; the cncAdapter consolidates the reference tool and the tool offsets sent by the numeric control
		  cncRetMdCmd = MD_CMD(cncDeviceName[], "GET TOOL_DATA", cncParInt[], cncParReal[])
		  cncActTool = cncParInt[1]
		  ; change the tool
        cncDoToolChange(cncActTool)

		  IF (cncActTool > 0) THEN
			cncToolFrame.X = cncParReal[1]
			cncToolFrame.Y = cncParReal[2]
			cncToolFrame.Z = cncParReal[3]
			cncToolFrame.A = cncParReal[4]
			cncToolFrame.B = cncParReal[5]
			cncToolFrame.C = cncParReal[6]
			$TOOL = tool_data[cncReferenceTool]:cncToolFrame
			$act_Tool = cncActTool
		  ENDIF

		ELSE

		  ; read the tool that was activated by the numeric control e.g. programmed via "T<cncToolIndex> M6"
		  ; the tool-geometry set in the CNC tool list is not taken into account except for the tool radius
		  cncRetMdCmd = MD_CMD(cncDeviceName[], "GET TOOL_DATA", cncParInt[], cncParReal[])
		  cncActTool = cncParInt[1]
		  ; change the tool
		  cncDoToolChange(cncActTool)
		  
		  IF (cncActTool > 0) THEN
			; the numeric control has a valid tool
			; by calling BAS.SRC the variables $TOOL, $LOAD and $IPO_MODE are initialised with KRC values
			; $LOAD and $IPO_MODE have to be initialised here because they are not taken into account by the numeric control
			BAS (#TOOL, cncActTool)
		  ELSE
			; no tool was applied inside the numeric control
			; behavior like BAS(#INITMOV): $LOAD and $IPO_MODE will not be overridden
			$TOOL=TOOL_DATA[1]
			$ACT_TOOL=1
		  ENDIF	;ENDIF (cncActTool > 0)

		ENDIF	;ENDIF (cncReferenceTool > 0)
	ENDIF	;ENDIF (cncSkipLoadTool == false)
	
	cncSkipLoadTool = false
	
    IF (cncTrackingMode == 2) THEN
      ; activate the cartesian motion controled by the cncAdapter
      MOVE_EMI cncDeviceName[] "CARTESIAN" FLT 0
    ELSE
     ; activate the #MCS motion controled by the cncAdapter
      MOVE_EMI cncDeviceName[] "MCS" FLT 0
    ENDIF

  ELSE

	; CNC is still busy processing the next motion
    WAIT SEC 0.1

  ENDIF
  
ENDWHILE

END

GLOBAL DEF gCodeExecute(GCodeFileName: IN)
char GCodeFileName[]
char GCodeSelectCmd[64]
bool retStrBool
int retStrInt

; the G-code program to be executed is spezified by the caller of this procedure
; the assigned program-name is to be communicated to the numeric control
; the position of the assembly is determined by the caller

retStrBool = strcopy(GCodeSelectCmd[], "SELECT ")
retStrInt = stradd(GCodeSelectCmd[], GCodeFileName[])
cncRetMdCmd = MD_CMD(cncDeviceName[], GCodeSelectCmd[], cncParInt[], cncParReal[])

; execute the numeric control program
cncMotion()

END