&ACCESS RV1
&REL 1
&COMMENT GripperSpotTech package
&PARAM KUKATPGRP_VERSION = 4.0
&PARAM DISKPATH = KRC:\R1\TP\GripperSpotTech
DEF Grp_Func ()
;############################################
;# File-Version: 1.0                        #
;# Copyright (c) KUKA Roboter GmbH 2015     #
;############################################

END; (Grp_Func)

;*********************************
GLOBAL DEF GRPg_ChkSetStatePLC ()
  INT iTmpStateNo
  BOOL bSuccess
  
  IF GRPg_ProcessData.ReqState > 0 THEN
    iTmpStateNo=GRPg_ProcessData.ReqState
    
    bSuccess= GRP_bCheckGrpLogic (GRPg_ProcessData.ActGrp, iTmpStateNo)
    IF (NOT bSuccess) THEN
      GRPg_ProcessData.ActGrp = 0
      GRPg_ProcessData.ReqState = 0
      RETURN
    ENDIF
    
    bSuccess=GRP_bCheckAllCond (GRPg_ProcessData.ActGrp, iTmpStateNo)
    IF (NOT bSuccess) THEN
      GRPg_ProcessData.ReqState = 0
      RETURN
    ENDIF
    ;Ok SetState and Reset ReqState
    GRPg_SetState (GRPg_ProcessData.ActGrp, iTmpStateNo)
    GRPg_ProcessData.ReqState = 0
  ENDIF
END; (GRPg_ChkSetStatePLC)

;*********************************
GLOBAL DEF GRPg_SetStateAndCheck (iGrpNo:IN, iStNo:IN, rWaitTime:IN, iCheckAndStrategy:IN)
;call from ILF Set-Gripper without CONT
  INT iGrpNo, iStNo, iCheckAndStrategy
  REAL rWaitTime
  BOOL bCheckState, bSuccess
  
  ;1) Stop Advance
  WAIT FOR TRUE

  GRP_USR_PreSetStAndChk (iGrpNo, iStNo,rWaitTime,iCheckAndStrategy)
  
  ;2) Set gripper
  GRPg_SetState (iGrpNo, iStNo)
  
  ;3) Wait if t > 0
  IF (rWaitTime>0) THEN
    WAIT SEC rWaitTime
  ENDIF
  
  ;4) Check state if configured
  IF iCheckAndStrategy > 0 THEN
    GRPg_CheckWithTimeOut (iGrpNo, iStNo, iCheckAndStrategy)
  ENDIF
  
  GRP_USR_PostSetStAndChk (iGrpNo, iStNo,rWaitTime,iCheckAndStrategy)

  ;5) Stop Advance
  WAIT FOR TRUE
END; (GRPg_SetStateAndCheck)
;*********************************
GLOBAL DEF GRPg_SetState (iGrpNo:IN, iStNo:IN)
;call from ILF "Gripper SET" with CONT
;call from ILF "Gripper SYN SET"
;call from Func GRPg_SetStateAndCheck

  INT iGrpNo, iStNo, iGrpOut[6], iGrpVal[6], i
  BOOL bGrpGhOut[6]
  IsGhostModeOn()
  GRP_USR_PreSetState (iGrpNo, iStNo)
  
  ;Read configured outputs
  iGrpOut[1]=GRPg_Grp[iGrpNo].Out1
  iGrpOut[2]=GRPg_Grp[iGrpNo].Out2
  iGrpOut[3]=GRPg_Grp[iGrpNo].Out3
  iGrpOut[4]=GRPg_Grp[iGrpNo].Out4
  iGrpOut[5]=GRPg_Grp[iGrpNo].Out5
  iGrpOut[6]=GRPg_Grp[iGrpNo].Out6
  
  ;read configured output values (Integer)
  iGrpVal[1]=GRPg_State[iGrpNo,iStNo].Out1
  iGrpVal[2]=GRPg_State[iGrpNo,iStNo].Out2
  iGrpVal[3]=GRPg_State[iGrpNo,iStNo].Out3
  iGrpVal[4]=GRPg_State[iGrpNo,iStNo].Out4
  iGrpVal[5]=GRPg_State[iGrpNo,iStNo].Out5
  iGrpVal[6]=GRPg_State[iGrpNo,iStNo].Out6
  
   ;read configured ghost configuration (Integer)
  bGrpGhOut[1]=GRPg_GrpPar[iGrpNo].GhOut1
  bGrpGhOut[2]=GRPg_GrpPar[iGrpNo].GhOut2
  bGrpGhOut[3]=GRPg_GrpPar[iGrpNo].GhOut3
  bGrpGhOut[4]=GRPg_GrpPar[iGrpNo].GhOut4
  bGrpGhOut[5]=GRPg_GrpPar[iGrpNo].GhOut5
  bGrpGhOut[6]=GRPg_GrpPar[iGrpNo].GhOut6

  ;Now set the output as configured
  FOR i=1 TO GRPg_Grp[iGrpNo].NumOut
    ;check OutputNo And GhostMode with GhostConfiguration
    IF ((iGrpOut[i] == 0) OR (GRP_bGhostIsOn AND bGrpGhOut[i])) THEN
      iGrpVal[i]=0
    ENDIF
    SWITCH  iGrpVal[i]
      CASE -2
        CONTINUE
        PULSE ($OUT[iGrpOut[i]],FALSE,GRPg_GrpPar[iGrpNo].PulsLen)
      CASE -1
        CONTINUE
        $OUT[iGrpOut[i]]=FALSE
      CASE 0
        ;do nothing (iGrpVal[i] = 0)
      CASE 1
        CONTINUE
        $OUT[iGrpOut[i]]=TRUE
      CASE 2
        CONTINUE
        PULSE ($OUT[iGrpOut[i]],TRUE,GRPg_GrpPar[iGrpNo].PulsLen)
      DEFAULT
        ;do nothing (ABS (iGrpVal[i]) > 2)
    ENDSWITCH
  ENDFOR
  GRPg_ProcessData.LastGrpNo = iGrpNo
  GRPg_ProcessData.LastStNo = iStNo
  GRP_USR_PostSetState (iGrpNo, iStNo)
END; (GRPg_SetState)

;*********************************
DEF PrepareStDate (iGrpNo:IN, iStNo:IN)
  ;This function prepares state informations
  INT iGrpNo, iStNo, i
  
 ;Which Inputs are configured for the grp
  GRP_PreState[1].iGrpIn=GRPg_Grp[iGrpNo].In1
  GRP_PreState[2].iGrpIn=GRPg_Grp[iGrpNo].In2
  GRP_PreState[3].iGrpIn=GRPg_Grp[iGrpNo].In3
  GRP_PreState[4].iGrpIn=GRPg_Grp[iGrpNo].In4
  GRP_PreState[5].iGrpIn=GRPg_Grp[iGrpNo].In5
  GRP_PreState[6].iGrpIn=GRPg_Grp[iGrpNo].In6
  ;read configured Input values (Integer) for this state
  GRP_PreState[1].iStInVal=GRPg_State[iGrpNo,iStNo].In1
  GRP_PreState[2].iStInVal=GRPg_State[iGrpNo,iStNo].In2
  GRP_PreState[3].iStInVal=GRPg_State[iGrpNo,iStNo].In3 
  GRP_PreState[4].iStInVal=GRPg_State[iGrpNo,iStNo].In4
  GRP_PreState[5].iStInVal=GRPg_State[iGrpNo,iStNo].In5
  GRP_PreState[6].iStInVal=GRPg_State[iGrpNo,iStNo].In6
  ;read configured ghost configuration
  GRP_PreState[1].bGhost=GRPg_GrpPar[iGrpNo].GhIn1
  GRP_PreState[2].bGhost=GRPg_GrpPar[iGrpNo].GhIn2
  GRP_PreState[3].bGhost=GRPg_GrpPar[iGrpNo].GhIn3
  GRP_PreState[4].bGhost=GRPg_GrpPar[iGrpNo].GhIn4
  GRP_PreState[5].bGhost=GRPg_GrpPar[iGrpNo].GhIn5
  GRP_PreState[6].bGhost=GRPg_GrpPar[iGrpNo].GhIn6

  FOR i = 1 TO 6
  ;Find out relevant Inputs
    IF ((GRP_PreState[i].iStInVal == 0) OR (i > GRPg_Grp[iGrpNo].NumIn)) THEN
      ;Not relevant: set it as 1026 and bVal to "FALSE"
      GRP_PreState[i].iGrpIn = 1026; 1026 is ever "FALSE"
      GRP_PreState[i].bStInVal= FALSE
    ELSE
      ;relevant Input (>0): TRUE; (<0):FALSE
      GRP_PreState[i].bStInVal = (GRP_PreState[i].iStInVal>0)
    ENDIF
  ENDFOR
  
  FOR i = 1 TO 6
  ;Overwrite the state if Ghost is on and configured 
    IF (GRP_bGhostIsOn AND GRP_PreState[i].bGhost AND GRP_PreState[i].bStInVal) THEN
     ;Not relevant: set it as 1026 and bVal to "FALSE"
      GRP_PreState[i].iGrpIn = 1026; 1026 is ever "FALSE"
      GRP_PreState[i].bStInVal= FALSE
    ENDIF
  ENDFOR
  
  GRP_iPreGrpNo = iGrpNo
  GRP_iPreStNo = iStNo 
END; (PrepareStDate)
;*********************************
DEFFCT BOOL bIsStateOK (iGrpNo:IN, iStNo:IN)
  ;This function checks the state
  INT iGrpNo, iStNo, i
  BOOL bSuccess
  
  Grp_iWrongInput=0
  IF ((iGrpNo <> GRP_iPreGrpNo) OR (iStNo <>GRP_iPreStNo)) THEN
    ;IMPORTANT: Ensure "PrepareStDate ()" is done before
    PrepareStDate (iGrpNo, iStNo)
  ENDIF
  bSuccess= TRUE
  FOR i = 1 to GRPg_Grp[iGrpNo].NumIn
    CONTINUE
    IF ($IN[GRP_PreState[i].iGrpIn] <> GRP_PreState[i].bStInVal) THEN
      Grp_iWrongInput= GRP_PreState[i].iGrpIn; notify the input
      GRPg_ProcessData.LastGrpNo = iGrpNo
      GRPg_ProcessData.LastStNo = iStNo
      bSuccess=FALSE
      EXIT
    ENDIF
  ENDFOR
  RETURN bSuccess
ENDFCT; (bIsStateOK)
;*********************************
DEFFCT BOOL GRP_bCheckAllCond (iGrpNO: IN, iStNo:IN)
  ;Check all conditions for manual operation 
  INT iGrpNo,iStNo,Offset,iTemp
  BOOL bStateSuccess,bInputSuccess,bFuncSuccess
  CHAR STRDEST[5]
  
  ;1. Input Condition
  bInputSuccess=TRUE
  iTemp=GRPg_State[iGrpNo,iStNo].InputNo
  IF (iTemp > 0) THEN
    bInputSuccess=$IN [iTemp]
    IF (NOT bInputSuccess) THEN
      Offset=Grp_IntToString(STRDEST[],iTemp)
      MsgNotify("InputStateNotOK",Grp_KxrModule[],,STRDEST[],11001,Grp_NOVLSTOP_LOG)
    ENDIF
  ENDIF
  
  ;2. State Condition
  bStateSuccess=TRUE
  iTemp=GRPg_State[iGrpNo,iStNo].StateNo 
  IF (iTemp > 0) THEN
      PrepareStDate (iGrpNo,iTemp) 
      bStateSuccess=bIsStateOK (iGrpNo,iTemp)
    IF (NOT bStateSuccess) THEN
      Offset=Grp_IntToString(STRDEST[],iTemp)
      MsgNotify("ConditionStateNotOK",Grp_KxrModule[],,STRDEST[],11002,Grp_NOVLSTOP_LOG)
    ENDIF
  ENDIF
  
  ;3. UserCondition
  bFuncSuccess=TRUE
  iTemp=GRPg_State[iGrpNo,iStNo].FuncNo
  IF (iTemp > 0) THEN
    bFuncSuccess=GRPg_UserCondition(iGrpNo, iStNo, iTemp)
    IF (NOT bFuncSuccess) THEN
      Offset=Grp_IntToString(STRDEST[],iTemp)
      MsgNotify("FuncStateNotOK",Grp_KxrModule[],,STRDEST[],11003,Grp_NOVLSTOP_LOG)
      ;RETURN
    ENDIF
  ENDIF
  
  IF (bStateSuccess AND bInputSuccess AND bFuncSuccess) THEN
    ;Condition not configured or Ok
    RETURN (TRUE)
  ELSE
    ;one or more condition not fulfilled
    RETURN (FALSE)
  ENDIF
ENDFCT; (GRP_bCheckAllCond)
;*********************************
DEF IsGhostModeOn ()
  ;Check the both flags for Ghost
  INT iTmpInput

  GRP_bGhostIsOn=FALSE
  iTmpInput = GRPg_GhostInput
  
  IF (iTmpInput < 1) THEN
    iTmpInput = 1026 ;0: ever FALSE
  ENDIF
  
  IF (GRPg_GhostMode) THEN
    GRP_bGhostIsOn=TRUE
    MsgNotify("GhostModeIsOn_Config",Grp_KxrModule[],,,11004,Grp_NOVLSTOP_LOG)
  ENDIF
  CONTINUE
  IF ($IN[iTmpInput]) THEN
    GRP_bGhostIsOn=TRUE
    MsgNotify("GhostModeIsOn_Input",Grp_KxrModule[],,,11005,Grp_NOVLSTOP_LOG)
  ENDIF
END; (IsGhostModeOn)
;*********************************
DEF GRPg_CheckWithTimeOut (iGrpNo:IN ,iStNo:IN,iErrStrategy:IN)
  ;# Call from function "GRPg_SetStateAndCheck"

  INT iGrpNo, iStNo, i, iTimeOut, iTempRobT, iTempMax, iErrStrategy
  BOOL bSuccess, bRepeat, bTimeOut
  
  bRepeat=TRUE
  bSuccess=FALSE
  iTimeOut=GRPg_GrpPar[iGrpNo].TimeOut
  
  IsGhostModeOn()  
  ;prepare and check
  PrepareStDate (iGrpNo,iStNo)
  bSuccess=bIsStateOK (iGrpNo,iStNo) 
  IF (bSuccess)  THEN
    RETURN; State is fulfilled --> Return    
  ENDIF
  
  WHILE bRepeat    
    ;prepare iTempRobT for timeout
    iTempMax = (2147483647 - (2 * iTimeOut))
    IF ($ROB_TIMER > iTempMax) THEN
      ;maxIntval (2147483647) --> (2 * iTimeOut)
      MsgNotify("WaitForRobTimerIsReseted",Grp_KxrModule[],,,11006,Grp_NOVLSTOP_LOG)
      WAIT SEC (3 * (iTimeOut/1000)); convert ms --> s 
    ENDIF
    
    iTempRobT = $ROB_TIMER + (iTimeOut);1 tick = 1ms    
    LOOP
      bSuccess=bIsStateOK (iGrpNo,iStNo)
      bTimeOut = ($ROB_TIMER > iTempRobT)
      IF bSuccess THEN
        ;CASE1- best Case State OK
        EXIT 
      ELSE
        IF (bTimeOut)THEN
          ;CASE2: Exit because time-out is over- State not OK
          Signal2PLC(TRUE,GRPg_Err2PLC); Set PLC Errorflag
          MsgNotify("StateNotOKTimeoutIsOver",Grp_KxrModule[],,,11007,Grp_NOVLSTOP_LOG)
          EXIT
        ENDIF
      ENDIF
    ENDLOOP

    IF bSuccess THEN
      bRepeat=FALSE
    ELSE
      bRepeat=ErrorStrategy(iGrpNo,iStNo,iErrStrategy)
    ENDIF
  ENDWHILE ;bRepeat
END ;(GRPg_CheckWithTimeOut)
;*********************************
GLOBAL DEF GRPg_Check (iGrpNo:IN ,iStNo:IN, bCont:IN, iErrStrategy:IN)
  ;CALL from ILF "Gripper CHECK"
  INT iGrpNo, iStNo, iErrStrategy
  BOOL bSuccess, bRepeat, bCont
  
  bRepeat=TRUE
  IsGhostModeOn()  
  ;prepare
  PrepareStDate (iGrpNo,iStNo) 
  GRP_USR_PreCheckState (iGrpNo,iStNo, bCont, iErrStrategy)
  
  IF NOT bCont THEN
   WAIT FOR TRUE
  ENDIF

  bSuccess=bIsStateOK (iGrpNo,iStNo) 
  GRP_USR_Post1CheckState (iGrpNo,iStNo, bSuccess)
  IF (bSuccess)  THEN
    RETURN; State is fulfilled --> Return    
  ENDIF
  
  WHILE bRepeat 
    IF NOT bSuccess THEN
      bRepeat=ErrorStrategy(iGrpNo,iStNo,iErrStrategy)
    ENDIF
    
    IF bRepeat THEN
      bSuccess=bIsStateOK (iGrpNo,iStNo)
      IF bSuccess THEN
        MsgNotify("StateIsOkContinue",Grp_KxrModule[],,,11009,Grp_NOVLSTOP_LOG)
        EXIT
      ENDIF
    ENDIF
  ENDWHILE
  GRP_USR_Post2CheckState (iGrpNo,iStNo, bSuccess)
END;(GRPg_Check)
;*********************************
GLOBAL DEF GRPg_SynCheck (iGrpNo:IN ,iStNo:IN, iErrStrategy:IN)
  ;CALL from ILF "Gripper SYN CHECK"
  INT iGrpNo, iStNo, iErrStrategy 
  BOOL bSuccess, bRepeat
 
  bRepeat=TRUE
  IsGhostModeOn()  
  ;prepare
  PrepareStDate (iGrpNo,iStNo)
  GRP_USR_PreSynCheck (iGrpNo,iStNo,iErrStrategy)
  bSuccess=bIsStateOK (iGrpNo,iStNo) 
  GRP_USR_Post1SynCheck(iGrpNo,iStNo, bSuccess)
  
  IF bSuccess THEN
    RETURN; State is fulfilled Return
  ELSE
    BRAKE
    Signal2PLC(TRUE,GRPg_Err2PLC); Set PLC Errorflag
    MsgNotify("StartErrStrategy_SynCheck",Grp_KxrModule[],,,11011,Grp_NOVLSTOP_LOG)
  ENDIF 
  
  WHILE bRepeat 
    IF NOT bSuccess THEN
      bRepeat=ErrorStrategy(iGrpNo,iStNo,iErrStrategy)
    ENDIF
    
    IF bRepeat THEN
      bSuccess=bIsStateOK (iGrpNo,iStNo)
      IF bSuccess THEN
        MsgNotify("StateIsOkContinue",Grp_KxrModule[],,,11010,Grp_NOVLSTOP_LOG)
        EXIT
      ENDIF
    ENDIF
  ENDWHILE
  GRP_USR_Post2SynCheck(iGrpNo,iStNo, bSuccess)
END;(GRPg_SynCheck)
;*********************************
DEFFCT BOOL GRP_bCheckGrpLogic(iGrpNo:IN, iStNo:IN)
  ;Check gripper logically
  INT iGrpNo, iStNo
  
  IF ((iGrpNo < 1) OR (iGrpNo > GRPg_MaxGrp)) THEN
    MsgNotify("Err_GrpNoNotValid",Grp_KxrModule[],,,11026,Grp_NOVLSTOP_LOG)
    RETURN(FALSE)
  ENDIF  
  
  IF ((iStNo < 1) OR (iStNo > GRPg_Grp[iGrpNo].NumState) OR (iStNo > 6))  THEN
    MsgNotify("Err_StateNoNotValid",Grp_KxrModule[],,,11027,Grp_NOVLSTOP_LOG)
    RETURN(FALSE)
  ENDIF
  
  IF ((GRPg_Grp[iGrpNo].NumOut < 1) OR (GRPg_Grp[iGrpNo].NumOut > 6)) THEN
    MsgNotify("Err_NumOutNotValid",Grp_KxrModule[],,,11028,Grp_NOVLSTOP_LOG)
    RETURN(FALSE)
  ENDIF
  
  IF ((GRPg_Grp[iGrpNo].NumIn < 1) OR (GRPg_Grp[iGrpNo].NumIn > 6)) THEN
    MsgNotify("Err_NumInNotValid",Grp_KxrModule[],,,11029,Grp_NOVLSTOP_LOG)
    RETURN(FALSE)
  ENDIF

  IF (NOT GRPg_Grp[iGrpNo].Act) THEN
    MsgNotify("Err_GrpNotActive",Grp_KxrModule[],,,11030,Grp_NOVLSTOP_LOG)
    RETURN(FALSE)
  ENDIF
  
  RETURN(TRUE)
ENDFCT; (GRP_bCheckGrpLogic)
;*********************************
GLOBAL DEFFCT GRP_ErrStgConfig_T GRP_ShowDialogAfterError (CurrErrStg:IN)
;checks in dependence of operation mode the error strategy
;BFg_ErrStgConfig_T StopMovement,IgnoreError,ShowDialog,UserErrStrategy
;CurrErrStg: BFg_ErrStrategy_T StopAtErr,DialAtT1T2,DialAtT1T2Aut,DialAllMode,IgnoreErr,UserErrStrategy
DECL GRP_ErrStgConfig_T ErrStgConfig
DECL GRP_ErrStrategy_T CurrErrStg

  ErrStgConfig=#ShowDialog; preset
  SWITCH CurrErrStg
  CASE #StopAtErr
    ErrStgConfig=#StopMovement
    MsgNotify("ErrStg_StopAtErr",Grp_KxrModule[],,,11012,Grp_NOVLSTOP_LOG)
  CASE #DialAtT1T2
    IF (($MODE_OP==#AUT)OR($MODE_OP==#EX)) THEN
      ErrStgConfig=#StopMovement
      MsgNotify("ErrStg_DialAtT1T2",Grp_KxrModule[],,,11013,Grp_NOVLSTOP_LOG)
    ENDIF
  CASE #DialAtT1T2Aut
    IF ($MODE_OP==#EX) THEN
      ErrStgConfig=#StopMovement
      MsgNotify("ErrStg_DialAtT1T2Aut",Grp_KxrModule[],,,11014,Grp_NOVLSTOP_LOG)
    ENDIF
  CASE #DialAllMode
    ErrStgConfig=#ShowDialog
  CASE #UserErrStrategy
    ErrStgConfig=#UserErrStrategy
  DEFAULT
    ErrStgConfig=#StopMovement
    MsgNotify("ErrStg_UnexpectedErr",Grp_KxrModule[],,,11015,Grp_NOVLSTOP_LOG)
  ENDSWITCH
  RETURN(ErrStgConfig) 
ENDFCT ;(GRP_ShowDialogAfterError)
;*********************************
DEF Signal2PLC(bVal:IN,iOutput:IN)
; set and reset Outputs
BOOL bVal
INT iOutput
  IF ((iOutput>0 )AND (iOutput <= $NUM_OUT)) THEN
    CONTINUE
    $OUT[iOutput]=bVal
  ENDIF
END ;(Signal2PLC)
;*******************************
DEFFCT BOOL ErrorStrategy(iGrpNo:IN ,iStNo:IN,iErrStrategy:IN)
  ;Validate ErrorStrategy
  INT iGrpNo,iStNo,iErrStrategy, iDialogAnswer, Offset
  DECL GRP_ErrStgConfig_T ErrStgConfig
  BOOL bRepeat
  CHAR STRDEST[5]
  
  IF ((iErrStrategy == 0)  OR (ABS (iErrStrategy) > 3)) THEN
    ;only 1, 2, 3 allowed
    Signal2PLC(TRUE,GRPg_Err2PLC); Set PLC Errorflag
    WHILE TRUE
      MsgQuit("iErrStrategyNotDefined",Grp_KxrModule[],,,11016,Grp_VLSTOP_LOG)
      Signal2PLC(FALSE,GRPg_Err2PLC); Reset PLC Errorflag
    ENDWHILE
  ENDIF
  
  GRPg_ProcessData.ActGrp = iGrpNo
  Offset=Grp_IntToString(STRDEST[],Grp_iWrongInput)
  MsgNotify("StartErrStrategy_CheckState",Grp_KxrModule[],,STRDEST[],11008,Grp_NOVLSTOP_LOG)
  
  bRepeat=FALSE;   
  ;TimeOut occured or State not succeed
  iDialogAnswer=0
  Signal2PLC(TRUE,GRPg_Err2PLC);Set ERROR Flag
  ErrStgConfig=GRP_ShowDialogAfterError(GRPg_ErrStrategy[iErrStrategy]);#Stop,#ShowDialog
  
  IF(ErrStgConfig==#UserErrStrategy)THEN
    ;handle the UserErrStrategy
    MsgNotify("StartUserErrStrategy",Grp_KxrModule[],,,11017,Grp_NOVLSTOP_LOG)
    bRepeat=GRPg_bUserErrStrategy(iGrpNo,iStNo)
    IF bRepeat THEN
      ;bRepeat == True: continue the process (5: #IgnoreError)
      MsgNotify("ContinueAfterUserErrStrategy",Grp_KxrModule[],,,11018,Grp_NOVLSTOP_LOG)
      iDialogAnswer=5
    ELSE
      ;bRepeat == FALSE: stop the process (7: #StopMovement )
      MsgNotify("StopAfterUserErrStrategy",Grp_KxrModule[],,,11019,Grp_NOVLSTOP_LOG)
      iDialogAnswer=7
    ENDIF
  ENDIF
   
  IF (ErrStgConfig==#ShowDialog) THEN   
    ;Dialog is configured --> continue after Dialog
    MsgNotify("StateErrContAfterDial",Grp_KxrModule[],,,11020,Grp_NOVLSTOP_LOG)
    IF Grp_bDialWithIgnore THEN
      ;Default with Ignore button
      MsgDialog(iDialogAnswer, "ErrStateDialog", Grp_KxrModule[],STRDEST[], "StopBtn", "RepeatBtn", "IgnoreBtn") 
      ;StopBtn 7, RepeatBtn 6, IgnoreBtn 5
    ELSE
      ; Don't show Ignore button
      MsgDialog(iDialogAnswer, "ErrStateDialog", Grp_KxrModule[],STRDEST[], "StopBtn", "RepeatBtn") 
      ;StopBtn 7, RepeatBtn 6
    ENDIF
    iDialogAnswer=iDialogAnswer
    Signal2PLC(FALSE,GRPg_Err2PLC); Reset PLC Errorflag
  ELSE
    ;No dialog configured --> continue as configured
    MsgNotify("StateErrContAsConf",Grp_KxrModule[],,,11021,Grp_NOVLSTOP_LOG)
    SWITCH ErrStgConfig
      CASE #IgnoreError ; Ignore error, same as Case 5
        iDialogAnswer=5
      CASE #StopMovement ; Stop Check, same as Case 7
        iDialogAnswer=7
      CASE #UserErrStrategy
        ;iDialogAnswer already Set above
      DEFAULT   ;only Stop is possible here --> stop
        MsgNotify("UnknownCase_ErrorStrategy",Grp_kxrModule[])
        iDialogAnswer=7
     ENDSWITCH
  ENDIF

  SWITCH iDialogAnswer
    CASE 5;IgnoreBtn
      MsgNotify("StateErrDialog_Ignore",Grp_KxrModule[],,,11023,Grp_NOVLSTOP_LOG)
      bRepeat=FALSE
    CASE 6;RepeatBtn
      MsgNotify("StateErrDialog_Repeat",Grp_KxrModule[],,,11022,Grp_NOVLSTOP_LOG)
      bRepeat=TRUE      
    CASE 7; StopBtn or #StopMovement or #DEFAULT
      WHILE TRUE
       MsgQuit("StateErrDialog_Stop",Grp_KxrModule[],,,11024,Grp_VLSTOP_LOG)
       Signal2PLC(FALSE,GRPg_Err2PLC); Reset PLC Errorflag
      ENDWHILE
     DEFAULT
        WHILE TRUE
          MsgQuit("UnexpectedError_Dialog",Grp_KxrModule[],,,11025,Grp_VLSTOP_LOG)
          Signal2PLC(FALSE,GRPg_Err2PLC); Reset PLC Errorflag
        ENDWHILE
  ENDSWITCH 
  Return(bRepeat)
ENDFCT;ErrorStrategy()
;*********************************
GLOBAL DEFFCT INT Grp_IntToString(STRDEST[]:OUT,INT2TRANSFORM:IN)
DECL CHAR STRDEST[]
DECL INT INT2TRANSFORM
DECL STATE_T STATE
DECL INT Offset
  Offset=0
  IF STRCLEAR(STRDEST[])THEN
    IF($ERR.Interpreter==#R_INT)THEN
      CONTINUE
      SWRITE(STRDEST[],STATE,Offset,"%d",INT2TRANSFORM)
    ELSE
      SWRITE(STRDEST[],STATE,Offset,"%d",INT2TRANSFORM)
    ENDIF
  ENDIF
  RETURN(Offset)
ENDFCT ;(Grp_IntToString)

